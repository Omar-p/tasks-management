name: Deploy Spring Boot Backend to AWS ECS

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yaml'

permissions:
  id-token: write
  contents: read
  packages: read   # required for ghcr.io base image

env:
  JAVA_VERSION: '25'
  AWS_REGION: 'eu-central-1'

jobs:
  # Build & Test with Maven
  build-test:
    name: Build & Test (Spring Boot)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Build and Test & Generate REST Docs
        run: ./mvnw -Dnet.bytebuddy.experimental=true clean package

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./backend/target/site/jacoco/jacoco.xml
          fail_ci_if_error: false

      - name: Upload REST Docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-rest-docs
          path: backend/target/classes/static/docs.html

  # Build and push Docker image
  build-and-push:
    name: Build & Push Docker Image (GraalVM native)
    runs-on: ubuntu-latest
    needs: build-test
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
      registry: ${{ steps.login-ecr.outputs.registry }}
      repository: ${{ vars.BACKEND_ECR_REPOSITORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download REST Docs artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-rest-docs
          path: backend/target/rest-docs

      - name: Stage REST Docs for native build
        run: |
          mkdir -p backend/src/main/resources/static
          cp backend/target/rest-docs/docs.html backend/src/main/resources/static/docs.html

      - name: Authenticate to GitHub Container Registry (for GraalVM base image)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_BACKEND_GITHUB_ACTION_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-backend

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Generate image tag
        id: image-tag
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_TAG="${TIMESTAMP}-${SHORT_SHA}"
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: build
        run: |
          REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          REPOSITORY="${{ vars.BACKEND_ECR_REPOSITORY }}"
          TAG="${{ steps.image-tag.outputs.tag }}"
  
          IMAGE_URI="${REGISTRY}/${REPOSITORY}:${TAG}"
          LATEST_URI="${REGISTRY}/${REPOSITORY}:latest"
  
          docker buildx build \
          --platform linux/amd64 \
          --file backend/Dockerfile.native \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          -t $IMAGE_URI \
          -t $LATEST_URI \
          ./backend --push
  
          echo "image-tag=${TAG}" >> $GITHUB_OUTPUT
          echo "registry=${REGISTRY}" >> $GITHUB_OUTPUT
          echo "repository=${REPOSITORY}" >> $GITHUB_OUTPUT


      - name: Generate deployment artifacts
        run: |
          cat > imagedefinitions.json << EOF
          [
            {
              "name": "${{ secrets.BACKEND_CONTAINER_NAME }}",
              "imageUri": "${{ steps.login-ecr.outputs.registry }}/${{ vars.BACKEND_ECR_REPOSITORY }}:${{ steps.image-tag.outputs.tag }}"
            }
          ]
          EOF

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: imagedefinitions.json
          retention-days: 14

  # Deploy to ECS
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_BACKEND_GITHUB_ACTION_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-backend-deploy

      - name: Deploy to ECS
        run: |
          REGISTRY="${{ needs.build-and-push.outputs.registry }}"
          REPOSITORY="${{ needs.build-and-push.outputs.repository }}"
          TAG="${{ needs.build-and-push.outputs.image-tag }}"

          IMAGE_URI="${REGISTRY}/${REPOSITORY}:${TAG}"

          TASK_DEFINITION=$(aws ecs describe-services \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }} \
            --query 'services[0].taskDefinition' \
            --output text)

          aws ecs describe-task-definition \
            --task-definition $TASK_DEFINITION \
            --query 'taskDefinition' > current-task-def.json

          sudo apt-get update && sudo apt-get install -y jq

          jq --arg IMAGE "$IMAGE_URI" \
             '.containerDefinitions[0].image = $IMAGE' \
             current-task-def.json > updated-task-def.json

          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
             updated-task-def.json > new-task-def.json

          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition $NEW_TASK_DEF \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}

      - name: Notify deployment success
        if: success()
        run: |
          echo "ðŸš€ Spring Boot backend deployment successful!"
          echo "Commit: ${{ github.sha }}"
